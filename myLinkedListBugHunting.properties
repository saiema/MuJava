
//path to original source folder (e.g.: src/)
path.original.source= /home/stein/Projects/MuJava/MuJava/test/

//path to original bin folder (e.g.: bin/)
path.original.bin= /home/stein/Projects/MuJava/MuJava/bin/

//path to tests bin folder
path.tests.bin= /home/stein/Projects/MuJava/MuJava/bin/

//where to save mutants
path.mutants= /home/stein/Desktop/mutants/

mutation.advanced.outputMutationsInfoInMutationScore= true

mutation.advanced.useSimpleClassNames=true

//class to mutate (full qualified name)
mutation.basic.class= bugHunting.myLinkedList.MyLinkedList

//methods to mutate (separated by spaces)
mutation.basic.methods=pepe

//operators to use (separated by spaces)
mutation.basic.operators= AODS AODU AOIS AOIU AORB AORS AORU ASRS COD COI COR LOD LOI LOR ROR SOR PRVOL_SMART PRVOU_REFINED PRVOR_REFINED
//mutation.basic.operators=COR COI LOD 

//if mutation score will be calculated
mutation.basic.mutationScore= true

//test classes to run (fully qualified names separated by spaces)
mutation.basic.tests= bugHunting.myLinkedList.RandoopTest0

mutation.basic.showSurvivingMutants= true

//methods that will not be used by PRVO (separated by spaces)
mutation.advanced.bannedMethods= toString getClass clone hashCode 

//fields that will not be used by PRVO (separated by spaces)
mutation.advanced.bannedFields=  

//if mutGenLimit annotations will be ignored
mutation.advanced.ignoreMutGenLimit= true

//if field mutations are allowed
mutation.advanced.allowFieldMutations= false

//if class mutations are allowed
mutation.advanced.allowClassMutations= false

//packages that will be marked to reload (separared by spaces, empty if all are allowed)
mutation.advanced.allowedPackagesToReload= myLinkedList

//allows PRVO to use numeric literal variations
mutation.advanced.allowNumericLiteralVariations= true

//stop at the first failing test for each mutant
mutation.advanced.quickDeath= true

//enable full verbose information
mutation.advanced.fullVerbose= true


//enable mutations of the form a = b where a is of type Object and b is a primitive type expression
mutation.advanced.disablePrimitiveToObjectAssignments= false

//wrap mutations of the form a = b to a = new T(b), where a is of type Object and b is a primitive type expression
mutation.advanced.wrapPrimitiveToObjectAssignments= false

//apply refined versions of PRVO to arguments in statements containing only a method call
//mutation.advanced.applyRefinedPRVOInMethodCallStatements= true

//how much generations to generate
mutation.advanced.generations= 1

//show surviving mutants at the end of mutation score process
mutation.basic.showSurvivingMutants= true


mutation.advanced.ReloaderCleanLimit=
mutation.advanced.toughness= true
mutation.advanced.prvo.enableSameLenght= true
mutation.advanced.prvo.enableIncreaseLenght=true
mutation.advanced.prvo.enableDecreaseLenght=true
mutation.advanced.prvo.enableOneByTwo=true
mutation.advanced.prvo.enableTwoByOne=true
mutation.advanced.prvo.enableAllByOneLeft=true
mutation.advanced.prvo.enableAllByOneRight=true
mutation.advanced.prvo.enableSuper=true
mutation.advanced.prvo.enableThis=false
mutation.advanced.prvo.enableReplacementWithLiterals=true
mutation.advanced.prvo.enableNullLiteral=true
mutation.advanced.prvo.enableTrueLiteral=true
mutation.advanced.prvo.enableFalseLiteral=true
mutation.advanced.prvo.enableEmptyString=true
mutation.advanced.prvo.enableZeroLiteral=true
mutation.advanced.prvo.enableOneLiteral=true
mutation.advanced.prvo.enableStringLiterals=false
mutation.advanced.prvo.allowNumericLiteralVariations=
mutation.advanced.prvo.disablePrimitiveToObjectAssignments=
mutation.advanced.prvo.wrapPrimitiveToObjectAssignments=
mutation.advanced.prvo.applyRefinedPRVOInMethodCallStatements= true
mutation.advanced.ror.replaceWithTrue= 	
mutation.advanced.ror.replaceWithFalse=
mutation.advanced.cor.andOperator=true
mutation.advanced.cor.orOperator==true
mutation.advanced.cor.xorOperator=true
mutation.advanced.cor.bitAndOperator=true




